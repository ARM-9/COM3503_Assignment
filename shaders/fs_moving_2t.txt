#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;
in vec2 movingTexCoord;

out vec4 fragColor;

uniform vec3 viewPos;
uniform sampler2D first_texture;
uniform sampler2D second_texture;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform Light first_light;
uniform Light second_light;

struct Spotlight {
  Light light;
  vec3 direction;
  float cutoff;
};

uniform Spotlight spotlight;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

vec3 CalcPointlight(Light light, vec3 normal, vec3 fragPos, vec3 viewDir) {
  vec3 lightDir = normalize(light.position - fragPos);
  vec3 texture = vec3(mix(texture(first_texture, aTexCoord),
                          texture(second_texture, movingTexCoord), 0.5f));

  // ambient
  vec3 ambient = light.ambient * texture;
  // diffuse
  float diff = max(dot(normal, lightDir), 0.0);
  vec3 diffuse = light.diffuse * diff * texture;
  // specular
  vec3 reflectDir = reflect(-lightDir, normal);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * spec * texture;

  return (ambient + diffuse + specular);
}

vec3 CalcSpotLight(Spotlight spotlight, vec3 normal, vec3 fragPos, vec3 viewDir) {
  Light light = spotlight.light;
  vec3 lightDir = normalize(light.position - fragPos);
  vec3 spotlightDir = normalize(spotlight.direction - light.position);
  vec3 texture = vec3(mix(texture(first_texture, aTexCoord),
                          texture(second_texture, movingTexCoord), 0.5f));

  // ambient
  vec3 ambient = light.ambient * texture;
  // diffuse
  float diff = max(dot(normal, lightDir), 0.0);
  vec3 diffuse = light.diffuse * diff * texture;
  // specular
  vec3 reflectDir = reflect(-lightDir, normal);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * spec * texture;

  float theta = dot(lightDir, -spotlightDir);
  if (theta < spotlight.cutoff) {
    return ambient;
  }
  
  return (ambient + diffuse + specular);
}

void main() {
  vec3 normal = normalize(aNormal);
  vec3 viewDir = normalize(viewPos - aPos);

  vec3 result = CalcPointlight(first_light, normal, aPos, viewDir);
  result += CalcPointlight(second_light, normal, aPos, viewDir);
  result += CalcSpotLight(spotlight, normal, aPos, viewDir);

  fragColor = vec4(result, 1.0);
}